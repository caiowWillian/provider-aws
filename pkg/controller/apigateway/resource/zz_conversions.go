/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package resource

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigateway"

	svcapitypes "github.com/crossplane/provider-aws/apis/apigateway/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetResourceInput returns input for read
// operation.
func GenerateGetResourceInput(cr *svcapitypes.Resource) *svcsdk.GetResourceInput {
	res := &svcsdk.GetResourceInput{}

	if cr.Spec.ForProvider.RestAPIID != nil {
		res.SetRestApiId(*cr.Spec.ForProvider.RestAPIID)
	}

	return res
}

// GenerateResource returns the current state in the form of *svcapitypes.Resource.
func GenerateResource(resp *svcsdk.Resource) *svcapitypes.Resource {
	cr := &svcapitypes.Resource{}

	if resp.Id != nil {
		cr.Status.AtProvider.ID = resp.Id
	} else {
		cr.Status.AtProvider.ID = nil
	}
	if resp.ParentId != nil {
		cr.Spec.ForProvider.ParentID = resp.ParentId
	} else {
		cr.Spec.ForProvider.ParentID = nil
	}
	if resp.Path != nil {
		cr.Status.AtProvider.Path = resp.Path
	} else {
		cr.Status.AtProvider.Path = nil
	}
	if resp.PathPart != nil {
		cr.Spec.ForProvider.PathPart = resp.PathPart
	} else {
		cr.Spec.ForProvider.PathPart = nil
	}
	if resp.ResourceMethods != nil {
		f4 := map[string]*svcapitypes.Method{}
		for f4key, f4valiter := range resp.ResourceMethods {
			f4val := &svcapitypes.Method{}
			if f4valiter.ApiKeyRequired != nil {
				f4val.APIKeyRequired = f4valiter.ApiKeyRequired
			}
			if f4valiter.AuthorizationScopes != nil {
				f4valf1 := []*string{}
				for _, f4valf1iter := range f4valiter.AuthorizationScopes {
					var f4valf1elem string
					f4valf1elem = *f4valf1iter
					f4valf1 = append(f4valf1, &f4valf1elem)
				}
				f4val.AuthorizationScopes = f4valf1
			}
			if f4valiter.AuthorizationType != nil {
				f4val.AuthorizationType = f4valiter.AuthorizationType
			}
			if f4valiter.AuthorizerId != nil {
				f4val.AuthorizerID = f4valiter.AuthorizerId
			}
			if f4valiter.HttpMethod != nil {
				f4val.HTTPMethod = f4valiter.HttpMethod
			}
			if f4valiter.MethodIntegration != nil {
				f4valf5 := &svcapitypes.Integration{}
				if f4valiter.MethodIntegration.CacheKeyParameters != nil {
					f4valf5f0 := []*string{}
					for _, f4valf5f0iter := range f4valiter.MethodIntegration.CacheKeyParameters {
						var f4valf5f0elem string
						f4valf5f0elem = *f4valf5f0iter
						f4valf5f0 = append(f4valf5f0, &f4valf5f0elem)
					}
					f4valf5.CacheKeyParameters = f4valf5f0
				}
				if f4valiter.MethodIntegration.CacheNamespace != nil {
					f4valf5.CacheNamespace = f4valiter.MethodIntegration.CacheNamespace
				}
				if f4valiter.MethodIntegration.ConnectionId != nil {
					f4valf5.ConnectionID = f4valiter.MethodIntegration.ConnectionId
				}
				if f4valiter.MethodIntegration.ConnectionType != nil {
					f4valf5.ConnectionType = f4valiter.MethodIntegration.ConnectionType
				}
				if f4valiter.MethodIntegration.ContentHandling != nil {
					f4valf5.ContentHandling = f4valiter.MethodIntegration.ContentHandling
				}
				if f4valiter.MethodIntegration.Credentials != nil {
					f4valf5.Credentials = f4valiter.MethodIntegration.Credentials
				}
				if f4valiter.MethodIntegration.HttpMethod != nil {
					f4valf5.HTTPMethod = f4valiter.MethodIntegration.HttpMethod
				}
				if f4valiter.MethodIntegration.IntegrationResponses != nil {
					f4valf5f7 := map[string]*svcapitypes.IntegrationResponse{}
					for f4valf5f7key, f4valf5f7valiter := range f4valiter.MethodIntegration.IntegrationResponses {
						f4valf5f7val := &svcapitypes.IntegrationResponse{}
						if f4valf5f7valiter.ContentHandling != nil {
							f4valf5f7val.ContentHandling = f4valf5f7valiter.ContentHandling
						}
						if f4valf5f7valiter.ResponseParameters != nil {
							f4valf5f7valf1 := map[string]*string{}
							for f4valf5f7valf1key, f4valf5f7valf1valiter := range f4valf5f7valiter.ResponseParameters {
								var f4valf5f7valf1val string
								f4valf5f7valf1val = *f4valf5f7valf1valiter
								f4valf5f7valf1[f4valf5f7valf1key] = &f4valf5f7valf1val
							}
							f4valf5f7val.ResponseParameters = f4valf5f7valf1
						}
						if f4valf5f7valiter.ResponseTemplates != nil {
							f4valf5f7valf2 := map[string]*string{}
							for f4valf5f7valf2key, f4valf5f7valf2valiter := range f4valf5f7valiter.ResponseTemplates {
								var f4valf5f7valf2val string
								f4valf5f7valf2val = *f4valf5f7valf2valiter
								f4valf5f7valf2[f4valf5f7valf2key] = &f4valf5f7valf2val
							}
							f4valf5f7val.ResponseTemplates = f4valf5f7valf2
						}
						if f4valf5f7valiter.SelectionPattern != nil {
							f4valf5f7val.SelectionPattern = f4valf5f7valiter.SelectionPattern
						}
						if f4valf5f7valiter.StatusCode != nil {
							f4valf5f7val.StatusCode = f4valf5f7valiter.StatusCode
						}
						f4valf5f7[f4valf5f7key] = f4valf5f7val
					}
					f4valf5.IntegrationResponses = f4valf5f7
				}
				if f4valiter.MethodIntegration.PassthroughBehavior != nil {
					f4valf5.PassthroughBehavior = f4valiter.MethodIntegration.PassthroughBehavior
				}
				if f4valiter.MethodIntegration.RequestParameters != nil {
					f4valf5f9 := map[string]*string{}
					for f4valf5f9key, f4valf5f9valiter := range f4valiter.MethodIntegration.RequestParameters {
						var f4valf5f9val string
						f4valf5f9val = *f4valf5f9valiter
						f4valf5f9[f4valf5f9key] = &f4valf5f9val
					}
					f4valf5.RequestParameters = f4valf5f9
				}
				if f4valiter.MethodIntegration.RequestTemplates != nil {
					f4valf5f10 := map[string]*string{}
					for f4valf5f10key, f4valf5f10valiter := range f4valiter.MethodIntegration.RequestTemplates {
						var f4valf5f10val string
						f4valf5f10val = *f4valf5f10valiter
						f4valf5f10[f4valf5f10key] = &f4valf5f10val
					}
					f4valf5.RequestTemplates = f4valf5f10
				}
				if f4valiter.MethodIntegration.TimeoutInMillis != nil {
					f4valf5.TimeoutInMillis = f4valiter.MethodIntegration.TimeoutInMillis
				}
				if f4valiter.MethodIntegration.TlsConfig != nil {
					f4valf5f12 := &svcapitypes.TLSConfig{}
					if f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification != nil {
						f4valf5f12.InsecureSkipVerification = f4valiter.MethodIntegration.TlsConfig.InsecureSkipVerification
					}
					f4valf5.TLSConfig = f4valf5f12
				}
				if f4valiter.MethodIntegration.Type != nil {
					f4valf5.Type = f4valiter.MethodIntegration.Type
				}
				if f4valiter.MethodIntegration.Uri != nil {
					f4valf5.URI = f4valiter.MethodIntegration.Uri
				}
				f4val.MethodIntegration = f4valf5
			}
			if f4valiter.MethodResponses != nil {
				f4valf6 := map[string]*svcapitypes.MethodResponse{}
				for f4valf6key, f4valf6valiter := range f4valiter.MethodResponses {
					f4valf6val := &svcapitypes.MethodResponse{}
					if f4valf6valiter.ResponseModels != nil {
						f4valf6valf0 := map[string]*string{}
						for f4valf6valf0key, f4valf6valf0valiter := range f4valf6valiter.ResponseModels {
							var f4valf6valf0val string
							f4valf6valf0val = *f4valf6valf0valiter
							f4valf6valf0[f4valf6valf0key] = &f4valf6valf0val
						}
						f4valf6val.ResponseModels = f4valf6valf0
					}
					if f4valf6valiter.ResponseParameters != nil {
						f4valf6valf1 := map[string]*bool{}
						for f4valf6valf1key, f4valf6valf1valiter := range f4valf6valiter.ResponseParameters {
							var f4valf6valf1val bool
							f4valf6valf1val = *f4valf6valf1valiter
							f4valf6valf1[f4valf6valf1key] = &f4valf6valf1val
						}
						f4valf6val.ResponseParameters = f4valf6valf1
					}
					if f4valf6valiter.StatusCode != nil {
						f4valf6val.StatusCode = f4valf6valiter.StatusCode
					}
					f4valf6[f4valf6key] = f4valf6val
				}
				f4val.MethodResponses = f4valf6
			}
			if f4valiter.OperationName != nil {
				f4val.OperationName = f4valiter.OperationName
			}
			if f4valiter.RequestModels != nil {
				f4valf8 := map[string]*string{}
				for f4valf8key, f4valf8valiter := range f4valiter.RequestModels {
					var f4valf8val string
					f4valf8val = *f4valf8valiter
					f4valf8[f4valf8key] = &f4valf8val
				}
				f4val.RequestModels = f4valf8
			}
			if f4valiter.RequestParameters != nil {
				f4valf9 := map[string]*bool{}
				for f4valf9key, f4valf9valiter := range f4valiter.RequestParameters {
					var f4valf9val bool
					f4valf9val = *f4valf9valiter
					f4valf9[f4valf9key] = &f4valf9val
				}
				f4val.RequestParameters = f4valf9
			}
			if f4valiter.RequestValidatorId != nil {
				f4val.RequestValidatorID = f4valiter.RequestValidatorId
			}
			f4[f4key] = f4val
		}
		cr.Status.AtProvider.ResourceMethods = f4
	} else {
		cr.Status.AtProvider.ResourceMethods = nil
	}

	return cr
}

// GenerateCreateResourceInput returns a create input.
func GenerateCreateResourceInput(cr *svcapitypes.Resource) *svcsdk.CreateResourceInput {
	res := &svcsdk.CreateResourceInput{}

	if cr.Spec.ForProvider.ParentID != nil {
		res.SetParentId(*cr.Spec.ForProvider.ParentID)
	}
	if cr.Spec.ForProvider.PathPart != nil {
		res.SetPathPart(*cr.Spec.ForProvider.PathPart)
	}
	if cr.Spec.ForProvider.RestAPIID != nil {
		res.SetRestApiId(*cr.Spec.ForProvider.RestAPIID)
	}

	return res
}

// GenerateUpdateResourceInput returns an update input.
func GenerateUpdateResourceInput(cr *svcapitypes.Resource) *svcsdk.UpdateResourceInput {
	res := &svcsdk.UpdateResourceInput{}

	if cr.Spec.ForProvider.RestAPIID != nil {
		res.SetRestApiId(*cr.Spec.ForProvider.RestAPIID)
	}

	return res
}

// GenerateDeleteResourceInput returns a deletion input.
func GenerateDeleteResourceInput(cr *svcapitypes.Resource) *svcsdk.DeleteResourceInput {
	res := &svcsdk.DeleteResourceInput{}

	if cr.Spec.ForProvider.RestAPIID != nil {
		res.SetRestApiId(*cr.Spec.ForProvider.RestAPIID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
